function [velocityErrors, desiredAlpha] = errorVelocity(v_ex__Mesh, violinMesh, xData, yData, measuredPressure, G_p_omega, G_v_omega, rangeTIK, rangeTSVD, numParamsTIK, numParamsTSVD, omega, rho, deleteIndexesVirt, pX, pY)
%ERRORVELOCITY 

v_ex_Mesh = zData(:,:,1); %!!!!!!!! ONLY FOR TEST
v_ex_vector = velocityData(:,3);

%  take the parameters
alphaTIK  = linspace(rangeTIK(1), rangeTIK(2), numParamsTIK);
alphaTSVD = round(linspace(rangeTSVD(1), rangeTSVD(2), numParamsTSVD));

% preallocate variables
nmseTIK  = zeros(1, numParamsTIK);
nccTIK  = zeros(1, numParamsTIK);
nmseTSVD = zeros(1, numParamsTSVD);
nccTSVD = zeros(1, numParamsTSVD); 

% compact singular value decomposition
[U,s,V] = csvd (G_p_omega);

% exact velocity norm
normV = norm(v_ex_vector,2);

% TIK cycle for every parameters
for ii = 1:numParamsTIK
    q_TIK = (1/(1i*omega*rho)).*tikhonov(U,s,V, measuredPressure  , alphaTIK(ii)); % reconstructed source streghts
    v_TIK = G_v_omega*q_TIK; 
    
    % adds nan to create a mesh to interpolate, CHECK IF NAN ARE ADDED
    v_TIK_Fin = addNans(violinMesh, v_TIK);
    
    % interpolate this mesh with v_ex_vector to find the points on the same indeces to do the subtraction
    v_TIK_Fin = interpGrid([violinMesh(:,1) violinMesh(:,2) v_TIK_Fin], xData, yData, pX, pY, true);
    
    v_TIK_Fin = v_TIK_Fin(:);
    
    % cancel nan from velocity vector
    cancelindex = find(isnan(v_TIK_Fin));
    v_TIK_Fin(cancelindex) = [];
    
    %NMSE
    nmseTIK(ii)  = 10*log(norm(v_TIK_Fin - v_ex_vector)^2 / (normV^2));
    
    nccTIK(ii) = (abs(v_TIK_Fin)'*abs(v_ex_vector)) / (norm(abs(v_TIK_),2)*norm(abs(v_ex_vector),2));


end

% TSVD cycle for every parameters
for jj = 1:numParamsTSVD
    q_TSVD = (1/(1i*omega*rho)).*tsvd (U,s,V, measuredPressure  , alphaTSVD(jj)); % reconstructed source streghts
    v_TSVD = G_v_omega*q_TSVD; 
    
    % adds nan to create a mesh to interpolate
    v_TSVD_Fin = addNans(violinMesh, v_TSVD);
    
    % interpolate this mesh with v_ex_vector to find the points on the same indeces to do the subtraction
    v_TSVD_Fin = interpGrid(V_TSVD_Fin, xData, yData, false);
    
    % reshape the vector to create the right mesh (?needed)
    % V_TSVD_Fin = reshape(V_TSVD_Fin, [length(xData(:,1)), length(yData(1,:))]);
    
     % cancel nan from velocity vector
    cancelindex = find(isnan(V_TVSD_Fin));
    v_TVSD_Fin(cancelindex) = [];
    v_ex_vector(cancelindex) = [];
    
    %NMSE
    nmseTSVD(jj) = 10*log(norm(v_TSVD_Fin - v_ex_vector)^2 / (normV^2));
    
    %NCC
    nccTSVD(jj)  = ((real(v_TSVD_Fin)'*real(v_ex_vector)) /...
        (norm(real(v_TSVD_Fin),2)*norm(real(v_ex_vector),2)) + ...
                (imag(v_TSVD)'*imag(v_ex_vector)) /...
                (norm(imag(v_TSVD),2)*norm(imag(v_ex_vector),2)))/2;
end

