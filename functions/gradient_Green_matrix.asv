function [G] = gradient_Green_matrix(r , s , omega)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% THIS FUNCTION COMPUTES THE GREEN'S FUNCTIONS             %%%%%%%
%%% DERIVATIVE ALONG THE NORMAL SURFACE'S DIRECTION          %%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INPUT: r  =   matrix containing the coordinates     %%%%%%%%%%%%
%%%        of the hologram plane measurement points     %%%%%%%%%%%%
%%%        or the surface coordinate points             %%%%%%%%%%%%
%%%        s  =   matrix containing the coordinates     %%%%%%%%%%%%
%%%        of the equivalent surface points             %%%%%%%%%%%%
%%%        omega = eigenfrequency array                 %%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% OUTPUT: G_v  = cell array containing Green's       %%%%%%%%%%%%%
%%%                function matrices                   %%%%%%%%%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

c = 343; % [m/s] speed of sound

% preallocate cell array
G = cell(length(omega),1);

% preallocate temporary matrix
G_w = zeros(length(r(:, 1)), length(s(:, 1)));  %Green's function init

%conversion from [mm] to [m]
r = r*0.001;
s = s*0.001;


end

